#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mowo-api:server');
var http = require('http');

//initial create table
const db = require("../config/db.config");
const Users_Role = db.users_role;
const Status_Desc = db.status_desc;
db.sequelize.sync();
//const project =   Users_Role.findOne({ where: { role_name	: 'developer' } });
// Users_Role.create({role_name	: 'programmer',role_type:'P'});
// Users_Role.create({role_name	: 'admin',role_type:'A'});
// Users_Role.create({role_name	: 'driver',role_type:'D'});
// Users_Role.create({role_name	: 'mobile',role_type:'M'});
// Users_Role.create({role_name	: 'customer',role_type:'C'});

// Status_Desc.create({group_name	: 'booking',status_code:'CB',status_name_en :'Create Booking',status_name_th :'สร้างการจอง'});
// Status_Desc.create({group_name	: 'booking',status_code:'UN',status_name_en :'Unassigned',status_name_th :'ยังไม่ได้มอบหมาย'});
// Status_Desc.create({group_name	: 'booking',status_code:'AS',status_name_en :'Assigned',status_name_th :'มอบหมายแล้ว'});
// Status_Desc.create({group_name	: 'booking',status_code:'AC',status_name_en :'Accepted',status_name_th :'ยอมรับแล้ว'});
// Status_Desc.create({group_name	: 'booking',status_code:'ST',status_name_en :'Start Job',status_name_th :'เริ่มงาน'});
// Status_Desc.create({group_name	: 'booking',status_code:'CL',status_name_en :'Cancle Job',status_name_th :'ยกเลิกงาน'});
// Status_Desc.create({group_name	: 'booking',status_code:'CP',status_name_en :'Completed',status_name_th:'เสร็จสิ้น'});
// Status_Desc.create({group_name	: 'booking',status_code:'CC',status_name_en :'Cancle Booking',status_name_th:'ยกเลิกการจอง'});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
server.listen(port, () => {
  console.log(`Server is running on port ${port}.`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
